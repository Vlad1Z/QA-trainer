{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\", \"disabled\"];\nconst _hoisted_4 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"h2\", null, \"Вопрос \" + _toDisplayString($data.currentQuestionNumber) + \" из \" + _toDisplayString($data.totalQuestions), 1 /* TEXT */), _createElementVNode(\"h3\", null, _toDisplayString($data.currentQuestion.question), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.shuffledAnswers, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass({\n        correct: $data.isAnswerSelected && answer === $data.currentQuestion.correct_answer,\n        wrong: $data.isAnswerSelected && $data.selectedAnswer === answer && $data.selectedAnswer !== $data.currentQuestion.correct_answer\n      }),\n      onClick: $event => $options.selectAnswer(answer),\n      disabled: $data.isAnswerSelected\n    }, _toDisplayString(answer), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.isAnswerSelected ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($options.resultMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.isAnswerSelected && $data.currentQuestionIndex < $data.questions.length - 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.nextQuestion && $options.nextQuestion(...args))\n  }, \"Следующий вопрос\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","currentQuestion","_hoisted_2","_createElementVNode","_toDisplayString","currentQuestionNumber","totalQuestions","question","_Fragment","_renderList","shuffledAnswers","answer","index","_normalizeClass","correct","isAnswerSelected","correct_answer","wrong","selectedAnswer","onClick","$event","$options","selectAnswer","disabled","_hoisted_3","_hoisted_4","resultMessage","_createCommentVNode","currentQuestionIndex","questions","length","_cache","args","nextQuestion"],"sources":["C:\\Users\\Vlad\\VScodeProjects\\quiz_refresh\\quiz-app\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"quiz\">\n    <div v-if=\"currentQuestion\">\n      <h2>Вопрос {{ currentQuestionNumber }} из {{ totalQuestions }}</h2>\n      <h3>{{ currentQuestion.question }}</h3>\n      <ul>\n        <li \n          v-for=\"(answer, index) in shuffledAnswers\" \n          :key=\"index\" \n          :class=\"{ correct: isAnswerSelected && answer === currentQuestion.correct_answer, wrong: isAnswerSelected && selectedAnswer === answer && selectedAnswer !== currentQuestion.correct_answer }\"\n          @click=\"selectAnswer(answer)\"\n          :disabled=\"isAnswerSelected\"\n        >\n          {{ answer }}\n        </li>\n      </ul>\n      <p v-if=\"isAnswerSelected\">{{ resultMessage }}</p>\n      <button v-if=\"isAnswerSelected && currentQuestionIndex < questions.length - 1\" @click=\"nextQuestion\">Следующий вопрос</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'QuizApp',\n  data() {\n    return {\n      questions: [],\n      currentQuestion: null,\n      currentQuestionIndex: 0,\n      currentQuestionNumber: 1,\n      totalQuestions: 20, // Общее количество вопросов\n      shuffledAnswers: [],\n      selectedAnswer: '',\n      isAnswerCorrect: false,\n      isAnswerSelected: false,\n    };\n  },\n  computed: {\n    resultMessage() {\n      return this.isAnswerCorrect ? 'Правильный ответ' : 'Неправильный ответ';\n    },\n  },\n  methods: {\n    fetchQuestions() {\n      axios.get('http://localhost:3000/api/questions')\n        .then(response => {\n          this.questions = response.data;\n          this.currentQuestion = this.questions[this.currentQuestionIndex];\n          this.shuffleAnswers();\n        })\n        .catch(error => {\n          console.error(\"There was an error fetching the questions:\", error);\n        });\n    },\n    shuffleAnswers() {\n      if (this.currentQuestion && this.currentQuestion.answers) {\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\n      }\n    },\n    shuffleArray(array) {\n      let currentIndex = array.length, temporaryValue, randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    },\n    selectAnswer(answer) {\n      if (!this.isAnswerSelected) {\n        this.isAnswerSelected = true;\n        this.selectedAnswer = answer;\n        this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\n      }\n    },\n    nextQuestion() {\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.currentQuestionIndex++;\n        this.currentQuestionNumber++;\n        this.currentQuestion = this.questions[this.currentQuestionIndex];\n        this.shuffleAnswers();\n        this.resetAnswer();\n      }\n    },\n    resetAnswer() {\n      this.isAnswerSelected = false;\n      this.selectedAnswer = '';\n      this.isAnswerCorrect = false;\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n}\n</script>\n\n<style>\n.correct {\n  color: green;\n}\n\n.wrong {\n  color: red;\n}\n\nbutton[disabled] {\n  cursor: not-allowed;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EADnBC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBOC,KAAA,CAAAC,eAAe,I,cAA1BH,mBAAA,CAgBM,OAlBVI,UAAA,GAGMC,mBAAA,CAAmE,YAA/D,SAAO,GAAAC,gBAAA,CAAGJ,KAAA,CAAAK,qBAAqB,IAAG,MAAI,GAAAD,gBAAA,CAAGJ,KAAA,CAAAM,cAAc,kBAC3DH,mBAAA,CAAuC,YAAAC,gBAAA,CAAhCJ,KAAA,CAAAC,eAAe,CAACM,QAAQ,kBAC/BJ,mBAAA,CAUK,c,kBATHL,mBAAA,CAQKU,SAAA,QAdbC,WAAA,CAOoCT,KAAA,CAAAU,eAAe,EAPnD,CAOkBC,MAAM,EAAEC,KAAK;yBADvBd,mBAAA,CAQK;MANFD,GAAG,EAAEe,KAAK;MACVhB,KAAK,EAThBiB,eAAA;QAAAC,OAAA,EAS6Bd,KAAA,CAAAe,gBAAgB,IAAIJ,MAAM,KAAKX,KAAA,CAAAC,eAAe,CAACe,cAAc;QAAAC,KAAA,EAASjB,KAAA,CAAAe,gBAAgB,IAAIf,KAAA,CAAAkB,cAAc,KAAKP,MAAM,IAAIX,KAAA,CAAAkB,cAAc,KAAKlB,KAAA,CAAAC,eAAe,CAACe;MAAc;MAC1LG,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,YAAY,CAACX,MAAM;MAC1BY,QAAQ,EAAEvB,KAAA,CAAAe;wBAERJ,MAAM,gCAbnBa,UAAA;oCAgBexB,KAAA,CAAAe,gBAAgB,I,cAAzBjB,mBAAA,CAAkD,KAhBxD2B,UAAA,EAAArB,gBAAA,CAgBoCiB,QAAA,CAAAK,aAAa,oBAhBjDC,mBAAA,gBAiBoB3B,KAAA,CAAAe,gBAAgB,IAAIf,KAAA,CAAA4B,oBAAoB,GAAG5B,KAAA,CAAA6B,SAAS,CAACC,MAAM,Q,cAAzEhC,mBAAA,CAA8H;IAjBpID,GAAA;IAiBsFsB,OAAK,EAAAY,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEX,QAAA,CAAAY,YAAA,IAAAZ,QAAA,CAAAY,YAAA,IAAAD,IAAA,CAAY;KAAE,kBAAgB,KAjB3HL,mBAAA,e,KAAAA,mBAAA,e"},"metadata":{},"sourceType":"module","externalDependencies":[]}