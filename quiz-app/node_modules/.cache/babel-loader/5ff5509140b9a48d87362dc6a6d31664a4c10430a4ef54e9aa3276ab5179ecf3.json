{"ast":null,"code":"export default {\n  name: 'AppQuiz',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      currentQuestion: null,\n      currentQuestionIndex: 0,\n      currentQuestionNumber: 1,\n      totalQuestions: 20,\n      shuffledAnswers: [],\n      selectedAnswer: '',\n      isAnswerCorrect: false,\n      isAnswerSelected: false\n    };\n  },\n  watch: {\n    questions: {\n      immediate: true,\n      handler(newQuestions) {\n        if (newQuestions && newQuestions.length > 0) {\n          this.currentQuestion = newQuestions[this.currentQuestionIndex];\n          this.shuffleAnswers(); // Перемешивание ответов\n        }\n      }\n    }\n  },\n  methods: {\n    shuffleAnswers() {\n      if (this.currentQuestion && this.currentQuestion.answers) {\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\n      }\n    },\n    shuffleArray(array) {\n      let currentIndex = array.length,\n        randomIndex,\n        temporaryValue;\n\n      // Пока остаются элементы для перемешивания...\n      while (currentIndex !== 0) {\n        // Выбираем случайный оставшийся элемент...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        // И меняем его местами с текущим элементом.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      return array;\n    },\n    selectAnswer(answer) {\n      this.selectedAnswer = answer;\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\n      this.isAnswerSelected = true;\n    },\n    nextQuestion() {\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.currentQuestionIndex++;\n        this.currentQuestionNumber++;\n        this.currentQuestion = this.questions[this.currentQuestionIndex];\n        this.shuffleAnswers();\n        this.resetAnswer();\n      }\n    },\n    resetAnswer() {\n      this.isAnswerSelected = false;\n      this.selectedAnswer = '';\n      this.isAnswerCorrect = false;\n    }\n  }\n  // ... другие существующие опции\n};","map":{"version":3,"names":["name","props","questions","type","Array","required","data","currentQuestion","currentQuestionIndex","currentQuestionNumber","totalQuestions","shuffledAnswers","selectedAnswer","isAnswerCorrect","isAnswerSelected","watch","immediate","handler","newQuestions","length","shuffleAnswers","methods","answers","shuffleArray","array","currentIndex","randomIndex","temporaryValue","Math","floor","random","selectAnswer","answer","correct_answer","nextQuestion","resetAnswer"],"sources":["C:\\Users\\Vlad\\VScodeProjects\\quiz_refresh\\quiz-app\\src\\components\\AppQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz\" v-if=\"currentQuestion\">\r\n    <h2>Вопрос {{ currentQuestionNumber }} из {{ totalQuestions }}</h2>\r\n    <h3>{{ currentQuestion.question }}</h3>\r\n    <ul>\r\n      <li v-for=\"(answer, index) in shuffledAnswers\" \r\n          :key=\"index\" \r\n          :class=\"{ correct: isAnswerSelected && answer === currentQuestion.correct_answer, wrong: isAnswerSelected && selectedAnswer === answer && selectedAnswer !== currentQuestion.correct_answer }\"\r\n          @click=\"selectAnswer(answer)\"\r\n          :disabled=\"isAnswerSelected\">\r\n        {{ answer }}\r\n      </li>\r\n    </ul>\r\n    <p v-if=\"isAnswerSelected\">{{ resultMessage }}</p>\r\n    <button v-if=\"isAnswerSelected && currentQuestionIndex < questions.length - 1\" @click=\"nextQuestion\">Следующий вопрос</button>\r\n  </div>\r\n  <div v-else>\r\n    <p>Загрузка вопросов...</p>\r\n    <!-- Можно добавить индикатор загрузки -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'AppQuiz',\r\n  props: {\r\n    questions: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currentQuestion: null,\r\n      currentQuestionIndex: 0,\r\n      currentQuestionNumber: 1,\r\n      totalQuestions: 20,\r\n      shuffledAnswers: [],\r\n      selectedAnswer: '',\r\n      isAnswerCorrect: false,\r\n      isAnswerSelected: false,\r\n    };\r\n  },\r\n  watch: {\r\n    questions: {\r\n      immediate: true,\r\n      handler(newQuestions) {\r\n        if (newQuestions && newQuestions.length > 0) {\r\n          this.currentQuestion = newQuestions[this.currentQuestionIndex];\r\n          this.shuffleAnswers(); // Перемешивание ответов\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\r\n      }\r\n    },\r\n    shuffleArray(array) {\r\n      let currentIndex = array.length, randomIndex, temporaryValue;\r\n\r\n      // Пока остаются элементы для перемешивания...\r\n      while (currentIndex !== 0) {\r\n        // Выбираем случайный оставшийся элемент...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // И меняем его местами с текущим элементом.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n\r\n      return array;\r\n    },\r\n    selectAnswer(answer) {\r\n      this.selectedAnswer = answer;\r\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\r\n      this.isAnswerSelected = true;\r\n    },\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.questions.length - 1) {\r\n        this.currentQuestionIndex++;\r\n        this.currentQuestionNumber++;\r\n        this.currentQuestion = this.questions[this.currentQuestionIndex];\r\n        this.shuffleAnswers();\r\n        this.resetAnswer();\r\n      }\r\n    },\r\n    resetAnswer() {\r\n      this.isAnswerSelected = false;\r\n      this.selectedAnswer = '';\r\n      this.isAnswerCorrect = false;\r\n    }\r\n  },\r\n  // ... другие существующие опции\r\n}\r\n</script>\r\n\r\n<style>\r\n  /* Существующие стили */\r\n</style>\r\n"],"mappings":"AAuBA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAE,CAAC;MACvBC,qBAAqB,EAAE,CAAC;MACxBC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,EAAE;MACnBC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLb,SAAS,EAAE;MACTc,SAAS,EAAE,IAAI;MACfC,OAAOA,CAACC,YAAY,EAAE;QACpB,IAAIA,YAAW,IAAKA,YAAY,CAACC,MAAK,GAAI,CAAC,EAAE;UAC3C,IAAI,CAACZ,eAAc,GAAIW,YAAY,CAAC,IAAI,CAACV,oBAAoB,CAAC;UAC9D,IAAI,CAACY,cAAc,CAAC,CAAC,EAAE;QACzB;MACF;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPD,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACb,eAAc,IAAK,IAAI,CAACA,eAAe,CAACe,OAAO,EAAE;QACxD,IAAI,CAACX,eAAc,GAAI,IAAI,CAACY,YAAY,CAAC,IAAI,CAAChB,eAAe,CAACe,OAAO,CAAC;MACxE;IACF,CAAC;IACDC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAIC,YAAW,GAAID,KAAK,CAACL,MAAM;QAAEO,WAAW;QAAEC,cAAc;;MAE5D;MACA,OAAOF,YAAW,KAAM,CAAC,EAAE;QACzB;QACAC,WAAU,GAAIE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAIL,YAAY,CAAC;QACtDA,YAAY,EAAE;;QAEd;QACAE,cAAa,GAAIH,KAAK,CAACC,YAAY,CAAC;QACpCD,KAAK,CAACC,YAAY,IAAID,KAAK,CAACE,WAAW,CAAC;QACxCF,KAAK,CAACE,WAAW,IAAIC,cAAc;MACrC;MAEA,OAAOH,KAAK;IACd,CAAC;IACDO,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACpB,cAAa,GAAIoB,MAAM;MAC5B,IAAI,CAACnB,eAAc,GAAImB,MAAK,KAAM,IAAI,CAACzB,eAAe,CAAC0B,cAAc;MACrE,IAAI,CAACnB,gBAAe,GAAI,IAAI;IAC9B,CAAC;IACDoB,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAAC1B,oBAAmB,GAAI,IAAI,CAACN,SAAS,CAACiB,MAAK,GAAI,CAAC,EAAE;QACzD,IAAI,CAACX,oBAAoB,EAAE;QAC3B,IAAI,CAACC,qBAAqB,EAAE;QAC5B,IAAI,CAACF,eAAc,GAAI,IAAI,CAACL,SAAS,CAAC,IAAI,CAACM,oBAAoB,CAAC;QAChE,IAAI,CAACY,cAAc,CAAC,CAAC;QACrB,IAAI,CAACe,WAAW,CAAC,CAAC;MACpB;IACF,CAAC;IACDA,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACrB,gBAAe,GAAI,KAAK;MAC7B,IAAI,CAACF,cAAa,GAAI,EAAE;MACxB,IAAI,CAACC,eAAc,GAAI,KAAK;IAC9B;EACF;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}