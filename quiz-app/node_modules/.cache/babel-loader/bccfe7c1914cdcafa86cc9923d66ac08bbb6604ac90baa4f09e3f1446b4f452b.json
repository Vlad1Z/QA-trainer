{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"quiz\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Загрузка вопросов...\", -1 /* HOISTED */);\nconst _hoisted_4 = [_hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" ваш шаблон викторины \")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [..._hoisted_4]));\n}","map":{"version":3,"names":["key","class","_createElementVNode","_hoisted_3","$data","currentQuestion","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_4"],"sources":["C:\\Users\\Vlad\\VScodeProjects\\quiz_refresh\\quiz-app\\src\\components\\AppQuiz.vue"],"sourcesContent":["<!-- AppQuiz.vue -->\r\n<template>\r\n  <div class=\"quiz\" v-if=\"currentQuestion\">\r\n    <!-- ваш шаблон викторины -->\r\n  </div>\r\n  <div v-else>\r\n    <p>Загрузка вопросов...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'AppQuiz',\r\n  data() {\r\n    return {\r\n      currentQuestion: null,\r\n      currentQuestionIndex: 0,\r\n      currentQuestionNumber: 1,\r\n      totalQuestions: 20,\r\n      shuffledAnswers: [],\r\n      selectedAnswer: '',\r\n      isAnswerCorrect: false,\r\n      isAnswerSelected: false,\r\n      questions: []\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n      let minDifficulty, maxDifficulty;\r\n      // определите minDifficulty и maxDifficulty на основе currentQuestionIndex\r\n      // ...\r\n\r\n      try {\r\n        const response = await axios.get(`http://localhost:3000/api/questions`, {\r\n          params: { minDifficulty, maxDifficulty }\r\n        });\r\n        this.questions = response.data;\r\n        this.setQuestion();\r\n      } catch (error) {\r\n        console.error(\"There was an error fetching the questions:\", error);\r\n      }\r\n    },\r\n    setQuestion() {\r\n      if (this.questions && this.questions.length > 0) {\r\n        this.currentQuestion = this.questions[this.currentQuestionIndex % this.questions.length];\r\n        this.shuffleAnswers();\r\n      }\r\n    },\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\r\n      }\r\n    },\r\n    shuffleArray(array) {\r\n      let currentIndex = array.length, randomIndex, temporaryValue;\r\n      while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n      return array;\r\n    },\r\n    selectAnswer(answer) {\r\n      this.selectedAnswer = answer;\r\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\r\n      this.isAnswerSelected = true;\r\n    },\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\r\n        this.currentQuestionIndex++;\r\n        this.currentQuestionNumber++;\r\n        this.fetchQuestions();\r\n      }\r\n    },\r\n    resetAnswer() {\r\n      this.isAnswerSelected = false;\r\n      this.selectedAnswer = '';\r\n      this.isAnswerCorrect = false;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuestions();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n  /* Стили */\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EAEOC,KAAK,EAAC;;;EAFbD,GAAA;AAAA;gCAMIE,mBAAA,CAA2B,WAAxB,sBAAoB;oBAAvBC,UAA2B,C;;SAJLC,KAAA,CAAAC,eAAe,I,cAAvCC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,0BAA6B,C,oBAE/BF,mBAAA,CAEM,OAPRG,UAAA,MAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}