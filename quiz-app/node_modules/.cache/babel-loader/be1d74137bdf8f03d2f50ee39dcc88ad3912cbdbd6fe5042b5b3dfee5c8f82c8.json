{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AppQuiz',\n  data() {\n    return {\n      currentQuestion: null,\n      currentQuestionIndex: 0,\n      currentQuestionNumber: 1,\n      totalQuestions: 20,\n      shuffledAnswers: [],\n      selectedAnswer: '',\n      isAnswerCorrect: false,\n      isAnswerSelected: false,\n      questions: []\n    };\n  },\n  methods: {\n    async fetchQuestions() {\n      let minDifficulty, maxDifficulty;\n      // Ваши условия определения сложности\n      // ...\n\n      try {\n        const response = await axios.get(`http://localhost:3000/api/questions`, {\n          params: {\n            minDifficulty,\n            maxDifficulty\n          }\n        });\n\n        // Фильтрация вопросов, которые еще не были заданы\n        const newQuestions = response.data.filter(question => !this.askedQuestions.has(question._id));\n        if (newQuestions.length > 0) {\n          this.questions = newQuestions;\n          this.setQuestion();\n        } else {\n          // Обработка ситуации, если все вопросы уже были заданы\n          console.log(\"Все вопросы данного диапазона сложности уже были заданы.\");\n        }\n      } catch (error) {\n        console.error(\"There was an error fetching the questions:\", error);\n      }\n    },\n    setQuestion() {\n      if (this.questions.length > 0) {\n        const randomIndex = Math.floor(Math.random() * this.questions.length);\n        this.currentQuestion = this.questions[randomIndex];\n        this.askedQuestions.add(this.currentQuestion._id); // Добавляем вопрос в Set заданных вопросов\n        this.shuffleAnswers();\n        this.resetAnswer();\n      }\n    },\n    shuffleAnswers() {\n      if (this.currentQuestion && this.currentQuestion.answers) {\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\n      }\n    },\n    shuffleArray(array) {\n      let currentIndex = array.length,\n        randomIndex,\n        temporaryValue;\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      return array;\n    },\n    selectAnswer(answer) {\n      this.selectedAnswer = answer;\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\n      this.isAnswerSelected = true;\n    },\n    nextQuestion() {\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\n        this.currentQuestionIndex++;\n        this.currentQuestionNumber++;\n        this.fetchQuestions();\n      }\n    },\n    resetAnswer() {\n      this.isAnswerSelected = false;\n      this.selectedAnswer = '';\n      this.isAnswerCorrect = false;\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n};","map":{"version":3,"names":["axios","name","data","currentQuestion","currentQuestionIndex","currentQuestionNumber","totalQuestions","shuffledAnswers","selectedAnswer","isAnswerCorrect","isAnswerSelected","questions","methods","fetchQuestions","minDifficulty","maxDifficulty","response","get","params","newQuestions","filter","question","askedQuestions","has","_id","length","setQuestion","console","log","error","randomIndex","Math","floor","random","add","shuffleAnswers","resetAnswer","answers","shuffleArray","array","currentIndex","temporaryValue","selectAnswer","answer","correct_answer","nextQuestion","mounted"],"sources":["C:\\Users\\Vlad\\VScodeProjects\\quiz_refresh\\quiz-app\\src\\components\\AppQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz\" v-if=\"currentQuestion\">\r\n    <h2>Вопрос {{ currentQuestionNumber }} из {{ totalQuestions }}</h2>\r\n    <h3>{{ currentQuestion.question }}</h3>\r\n    <ul>\r\n      <li v-for=\"(answer, index) in shuffledAnswers\" \r\n          :key=\"index\" \r\n          :class=\"{\r\n            correct: isAnswerSelected && answer === currentQuestion.correct_answer, \r\n            wrong: isAnswerSelected && selectedAnswer === answer && selectedAnswer !== currentQuestion.correct_answer\r\n          }\"\r\n          @click=\"isAnswerSelected ? null : selectAnswer(answer)\"\r\n          :disabled=\"isAnswerSelected\">\r\n        {{ answer }}\r\n      </li>\r\n    </ul>\r\n    <p v-if=\"isAnswerSelected\">{{ resultMessage }}</p>\r\n    <button v-if=\"isAnswerSelected && currentQuestionIndex < totalQuestions - 1\" @click=\"nextQuestion\">Следующий вопрос</button>\r\n  </div>\r\n  <div v-else>\r\n    <p>Загрузка вопросов...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'AppQuiz',\r\n  data() {\r\n    return {\r\n      currentQuestion: null,\r\n      currentQuestionIndex: 0,\r\n      currentQuestionNumber: 1,\r\n      totalQuestions: 20,\r\n      shuffledAnswers: [],\r\n      selectedAnswer: '',\r\n      isAnswerCorrect: false,\r\n      isAnswerSelected: false,\r\n      questions: []\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n      let minDifficulty, maxDifficulty;\r\n      // Ваши условия определения сложности\r\n      // ...\r\n\r\n      try {\r\n        const response = await axios.get(`http://localhost:3000/api/questions`, {\r\n          params: { minDifficulty, maxDifficulty }\r\n        });\r\n\r\n        // Фильтрация вопросов, которые еще не были заданы\r\n        const newQuestions = response.data.filter(\r\n          question => !this.askedQuestions.has(question._id)\r\n        );\r\n\r\n        if (newQuestions.length > 0) {\r\n          this.questions = newQuestions;\r\n          this.setQuestion();\r\n        } else {\r\n          // Обработка ситуации, если все вопросы уже были заданы\r\n          console.log(\"Все вопросы данного диапазона сложности уже были заданы.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"There was an error fetching the questions:\", error);\r\n      }\r\n    },\r\n    setQuestion() {\r\n      if (this.questions.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * this.questions.length);\r\n        this.currentQuestion = this.questions[randomIndex];\r\n        this.askedQuestions.add(this.currentQuestion._id); // Добавляем вопрос в Set заданных вопросов\r\n        this.shuffleAnswers();\r\n        this.resetAnswer();\r\n      }\r\n    },\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\r\n      }\r\n    },\r\n    shuffleArray(array) {\r\n      let currentIndex = array.length, randomIndex, temporaryValue;\r\n      while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n      return array;\r\n    },\r\n    selectAnswer(answer) {\r\n      this.selectedAnswer = answer;\r\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\r\n      this.isAnswerSelected = true;\r\n    },\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\r\n        this.currentQuestionIndex++;\r\n        this.currentQuestionNumber++;\r\n        this.fetchQuestions();\r\n      }\r\n    },\r\n    resetAnswer() {\r\n      this.isAnswerSelected = false;\r\n      this.selectedAnswer = '';\r\n      this.isAnswerCorrect = false;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuestions();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n  /* Ваши стили */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}