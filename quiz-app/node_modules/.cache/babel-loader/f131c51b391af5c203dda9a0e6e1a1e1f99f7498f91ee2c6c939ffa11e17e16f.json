{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"quiz\"\n};\nconst _hoisted_2 = [\"onClick\", \"disabled\"];\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Загрузка вопросов...\", -1 /* HOISTED */);\nconst _hoisted_6 = [_hoisted_5];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Заголовок текущего вопроса \"), _createElementVNode(\"h2\", null, \"Вопрос \" + _toDisplayString($data.currentQuestionNumber) + \" из \" + _toDisplayString($data.totalQuestions), 1 /* TEXT */), _createElementVNode(\"h3\", null, _toDisplayString($data.currentQuestion.question), 1 /* TEXT */), _createCommentVNode(\" Список вариантов ответов \"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.shuffledAnswers, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass({\n        correct: $data.isAnswerSelected && answer === $data.currentQuestion.correct_answer,\n        wrong: $data.isAnswerSelected && $data.selectedAnswer === answer && $data.selectedAnswer !== $data.currentQuestion.correct_answer\n      }),\n      onClick: $event => $data.isAnswerSelected ? null : $options.selectAnswer(answer),\n      disabled: $data.isAnswerSelected\n    }, _toDisplayString(answer), 11 /* TEXT, CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Сообщение о результате выбора ответа \"), $data.isAnswerSelected ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString(_ctx.resultMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Кнопки для перехода к следующему вопросу или завершения теста \"), $data.isAnswerSelected && $data.currentQuestionIndex < $data.totalQuestions - 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.nextQuestion && $options.nextQuestion(...args))\n  }, \"Следующий вопрос\")) : _createCommentVNode(\"v-if\", true), $data.isAnswerSelected && $data.currentQuestionIndex === $data.totalQuestions - 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.finishTest && $options.finishTest(...args))\n  }, \"Завершить тест\")) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [..._hoisted_6]));\n}","map":{"version":3,"names":["key","class","_createElementVNode","_hoisted_5","$data","currentQuestion","_createElementBlock","_hoisted_1","_createCommentVNode","_toDisplayString","currentQuestionNumber","totalQuestions","question","_Fragment","_renderList","shuffledAnswers","answer","index","_normalizeClass","correct","isAnswerSelected","correct_answer","wrong","selectedAnswer","onClick","$event","$options","selectAnswer","disabled","_hoisted_2","_hoisted_3","_ctx","resultMessage","currentQuestionIndex","_cache","args","nextQuestion","finishTest","_hoisted_4","_hoisted_6"],"sources":["C:\\Users\\Vlad\\VScodeProjects\\quiz_refresh\\quiz-app\\src\\components\\AppQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz\" v-if=\"currentQuestion\">\r\n    <!-- Заголовок текущего вопроса -->\r\n    <h2>Вопрос {{ currentQuestionNumber }} из {{ totalQuestions }}</h2>\r\n    <h3>{{ currentQuestion.question }}</h3>\r\n\r\n    <!-- Список вариантов ответов -->\r\n    <ul>\r\n      <li v-for=\"(answer, index) in shuffledAnswers\" \r\n          :key=\"index\" \r\n          :class=\"{ correct: isAnswerSelected && answer === currentQuestion.correct_answer, wrong: isAnswerSelected && selectedAnswer === answer && selectedAnswer !== currentQuestion.correct_answer }\"\r\n          @click=\"isAnswerSelected ? null : selectAnswer(answer)\"\r\n          :disabled=\"isAnswerSelected\">\r\n        {{ answer }}\r\n      </li>\r\n    </ul>\r\n\r\n    <!-- Сообщение о результате выбора ответа -->\r\n    <p v-if=\"isAnswerSelected\">{{ resultMessage }}</p>\r\n\r\n    <!-- Кнопки для перехода к следующему вопросу или завершения теста -->\r\n    <button v-if=\"isAnswerSelected && currentQuestionIndex < totalQuestions - 1\" @click=\"nextQuestion\">Следующий вопрос</button>\r\n    <button v-if=\"isAnswerSelected && currentQuestionIndex === totalQuestions - 1\" @click=\"finishTest\">Завершить тест</button>\r\n  </div>\r\n  <div v-else>\r\n    <p>Загрузка вопросов...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'AppQuiz',\r\n  data() {\r\n    return {\r\n      currentQuestion: null, // Текущий вопрос\r\n      currentQuestionIndex: 0, // Индекс текущего вопроса\r\n      currentQuestionNumber: 1, // Номер текущего вопроса\r\n      totalQuestions: 20, // Общее количество вопросов\r\n      shuffledAnswers: [], // Перемешанные ответы\r\n      selectedAnswer: '', // Выбранный ответ\r\n      isAnswerCorrect: false, // Правильность ответа\r\n      isAnswerSelected: false, // Флаг выбора ответа\r\n      questions: [] // Список вопросов\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n      try {\r\n        const response = await axios.get(`http://localhost:3000/api/questions`, {\r\n          params: { index: this.currentQuestionIndex }\r\n        });\r\n        if (response.data.length > 0) {\r\n          this.questions = response.data;\r\n          this.setQuestion();\r\n        } else {\r\n          console.error(\"No questions found for the current difficulty range.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"There was an error fetching the questions:\", error);\r\n      }\r\n    },\r\n    setQuestion() {\r\n      if (this.questions.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * this.questions.length);\r\n        this.currentQuestion = this.questions[randomIndex];\r\n        this.shuffleAnswers();\r\n        this.resetAnswer();\r\n      }\r\n    },\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = this.shuffleArray(this.currentQuestion.answers);\r\n      }\r\n    },\r\n    shuffleArray(array) {\r\n      let currentIndex = array.length, randomIndex, temporaryValue;\r\n      while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n      return array;\r\n    },\r\n    selectAnswer(answer) {\r\n      this.selectedAnswer = answer;\r\n      this.isAnswerCorrect = answer === this.currentQuestion.correct_answer;\r\n      this.isAnswerSelected = true;\r\n    },\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\r\n        this.currentQuestionIndex++;\r\n        this.currentQuestionNumber++;\r\n        this.fetchQuestions();\r\n      }\r\n    },\r\n    resetAnswer() {\r\n      this.isAnswerSelected = false;\r\n      this.selectedAnswer = '';\r\n      this.isAnswerCorrect = false;\r\n    },\r\n    finishTest() {\r\n      console.log(\"Тест завершен. Отобразить результаты.\");\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuestions();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n  /* Стили компонента */\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EACOC,KAAK,EAAC;;mBADb;;EAAAD,GAAA;AAAA;;EAAAA,GAAA;AAAA;gCAyBIE,mBAAA,CAA2B,WAAxB,sBAAoB;oBAAvBC,UAA2B,C;;SAxBLC,KAAA,CAAAC,eAAe,I,cAAvCC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,mBAAA,gCAAmC,EACnCN,mBAAA,CAAmE,YAA/D,SAAO,GAAAO,gBAAA,CAAGL,KAAA,CAAAM,qBAAqB,IAAG,MAAI,GAAAD,gBAAA,CAAGL,KAAA,CAAAO,cAAc,kBAC3DT,mBAAA,CAAuC,YAAAO,gBAAA,CAAhCL,KAAA,CAAAC,eAAe,CAACO,QAAQ,kBAE/BJ,mBAAA,8BAAiC,EACjCN,mBAAA,CAQK,c,kBAPHI,mBAAA,CAMKO,SAAA,QAdXC,WAAA,CAQoCV,KAAA,CAAAW,eAAe,EARnD,CAQkBC,MAAM,EAAEC,KAAK;yBAAzBX,mBAAA,CAMK;MALAN,GAAG,EAAEiB,KAAK;MACVhB,KAAK,EAVhBiB,eAAA;QAAAC,OAAA,EAU6Bf,KAAA,CAAAgB,gBAAgB,IAAIJ,MAAM,KAAKZ,KAAA,CAAAC,eAAe,CAACgB,cAAc;QAAAC,KAAA,EAASlB,KAAA,CAAAgB,gBAAgB,IAAIhB,KAAA,CAAAmB,cAAc,KAAKP,MAAM,IAAIZ,KAAA,CAAAmB,cAAc,KAAKnB,KAAA,CAAAC,eAAe,CAACgB;MAAc;MAC1LG,OAAK,EAAAC,MAAA,IAAErB,KAAA,CAAAgB,gBAAgB,UAAUM,QAAA,CAAAC,YAAY,CAACX,MAAM;MACpDY,QAAQ,EAAExB,KAAA,CAAAgB;wBACVJ,MAAM,gCAbjBa,UAAA;oCAiBIrB,mBAAA,0CAA6C,EACpCJ,KAAA,CAAAgB,gBAAgB,I,cAAzBd,mBAAA,CAAkD,KAlBtDwB,UAAA,EAAArB,gBAAA,CAkBkCsB,IAAA,CAAAC,aAAa,oBAlB/CxB,mBAAA,gBAoBIA,mBAAA,mEAAsE,EACxDJ,KAAA,CAAAgB,gBAAgB,IAAIhB,KAAA,CAAA6B,oBAAoB,GAAG7B,KAAA,CAAAO,cAAc,Q,cAAvEL,mBAAA,CAA4H;IArBhIN,GAAA;IAqBkFwB,OAAK,EAAAU,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAET,QAAA,CAAAU,YAAA,IAAAV,QAAA,CAAAU,YAAA,IAAAD,IAAA,CAAY;KAAE,kBAAgB,KArBvH3B,mBAAA,gBAsBkBJ,KAAA,CAAAgB,gBAAgB,IAAIhB,KAAA,CAAA6B,oBAAoB,KAAK7B,KAAA,CAAAO,cAAc,Q,cAAzEL,mBAAA,CAA0H;IAtB9HN,GAAA;IAsBoFwB,OAAK,EAAAU,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAET,QAAA,CAAAW,UAAA,IAAAX,QAAA,CAAAW,UAAA,IAAAF,IAAA,CAAU;KAAE,gBAAc,KAtBrH3B,mBAAA,e,oBAwBEF,mBAAA,CAEM,OA1BRgC,UAAA,MAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}